#include "fw-update/package_parser.hpp"
#include "fw-update/package_signature.hpp"

#include "config.h"

#include <typeinfo>
#include <sstream>
#include <xyz/openbmc_project/Common/error.hpp>

#include <gmock/gmock.h>
#include <gtest/gtest.h>

using namespace pldm::fw_update;
using InternalFailure =
    sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure;

class PackageSignatureTest : public testing::Test
{
  protected:
    PackageSignatureTest(){

        unsignedPackage = {
            0xF0,0x18,0x87,0x8C,0xCB,0x7D,0x49,0x43,0x98,0x00,0xA0,0x2F,0x05,0x9A,0xCA,0x02,
            0x01,0x8B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x0C,0xE5,0x07,0x00,
            0x08,0x00,0x01,0x0E,0x56,0x65,0x72,0x73,0x69,0x6F,0x6E,0x53,0x74,0x72,0x69,0x6E,
            0x67,0x31,0x01,0x2E,0x00,0x01,0x01,0x00,0x00,0x00,0x01,0x0E,0x00,0x00,0x01,0x56,
            0x65,0x72,0x73,0x69,0x6F,0x6E,0x53,0x74,0x72,0x69,0x6E,0x67,0x32,0x02,0x00,0x10,
            0x00,0x16,0x20,0x23,0xC9,0x3E,0xC5,0x41,0x15,0x95,0xF4,0x48,0x70,0x1D,0x49,0xD6,
            0x75,0x01,0x00,0x0A,0x00,0x64,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x8B,
            0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x01,0x0E,0x56,0x65,0x72,0x73,0x69,0x6F,0x6E,
            0x53,0x74,0x72,0x69,0x6E,0x67,0x33,0xF0,0xAB,0x72,0x6D,0x48,0xD2,0x1E,0x80,0x2E,
            0x77,0x71,0x2C,0x8E,0xE3,0x1F,0x6F,0x30,0x76,0x65,0x08,0xB8,0x1B,0x4B,0x03,0x7E,
            0x96,0xD9,0x2A,0x36,0x3A,0xA2,0xEE,0x8A,0x30,0x21,0x33,0xFC,0x27,0xE7,0x3E,0x56,
            0x79,0x0E,0xBD,0xED,0x44,0x96,0x2F,0x84,0xB5,0xED,0x19,0x3A,0x5E,0x62,0x2A,0x6E,
            0x41,0x7E,0xDC,0x2E,0xBB,0x87,0x41,0x7F,0xCE,0xF0,0xD7,0xE4,0x0F,0x95,0x33,0x3B,
            0xF9,0x04,0xF8,0x1A,0x92,0x54,0xFD,0x33,0xBA,0xCD,0xA6,0x08,0x0D,0x32,0x2C,0xEB,
            0x75,0xDC,0xEA,0xBA,0x30,0x94,0x78,0x8C,0x61,0x58,0xD0,0x59,0xF3,0x29,0x6D,0x67,
            0xD3,0x26,0x08,0x25,0x1E,0x69,0xBB,0x28,0xB0,0x61,0xFB,0x96,0xA3,0x8C,0xBF,0x01,
            0x94,0xEB,0x3A,0x63,0x6F,0xC8,0x0F,0x42,0x7F,0xEB,0x3D,0xA7,0x8B,0xE5,0xD2,0xFB,
            0xB8,0xD3,0x15,0xAA,0xDF,0x86,0xAB,0x6E,0x29,0xB3,0x12,0x96,0xB7,0x86,0xDA,0xF9,
            0xD7,0x70,0xAD,0xB6,0x1A,0x29,0xB1,0xA4,0x2B,0x6F,0x63,0xEE,0x05,0x9F,0x35,0x49,
            0xA1,0xAB,0xA2,0x6F,0x7C,0xFC,0x23,0x09,0x55,0xED,0xF7,0x35,0xD8,0x2F,0x8F,0xD2,
            0xBD,0x77,0xED,0x0C,0x7A,0xE9,0xD3,0xF7,0x90,0xA7,0x45,0x97,0xAA,0x3A,0x79,0xC4,
            0xF8,0xD2,0xFE,0xFB,0xB3,0x25,0x86,0x98,0x6B,0x98,0x10,0x15,0xB3,0xDD,0x43,0x0B,
            0x20,0x5F,0xE4,0x62,0xC8,0xA1,0x3E,0x9C,0xF3,0xD8,0xEA,0x15,0xA1,0x24,0x94,0x1C,
            0xF5,0xB4,0x86,0x04,0x30,0x2C,0x84,0xB6,0x29,0xF6,0x9D,0x76,0x6E,0xD4,0x0C,0x1C,
            0xBD,0xF9,0x95,0x7E,0xAF,0x62,0x80,0x14,0xE6,0x1C,0x43,0x51,0x5C,0xCA,0x50,0xE1,
            0x73,0x3D,0x75,0x66,0x52,0x9E,0xB6,0x15,0x7E,0xF7,0xE5,0xE2,0xAF,0x54,0x75,0x82,
            0x3D,0x55,0xC7,0x59,0xD7,0xBD,0x8C,0x4B,0x74,0xD1,0x3F,0xA8,0x1B,0x0A,0xF0,0x5A,
            0x32,0x2B,0xA7,0xA4,0xBE,0x38,0x18,0xAE,0x69,0xDC,0x54,0x7C,0x60,0xEF,0x4F,0x0F,
            0x7F,0x5A,0xA6,0xC8,0x3E,0x59,0xFD,0xF5,0x98,0x26,0x71,0xD0,0xEF,0x54,0x47,0x38,
            0x1F,0x18,0x9D,0x37,0x9D,0xF0,0xCD,0x00,0x73,0x30,0xD4,0xB7,0xDA,0x2D,0x36,0xA1,
            0xA9,0xAD,0x4F,0x9F,0x17,0xA5,0xA1,0x62,0x18,0x21,0xDD,0x0E,0xB6,0x72,0xDE,0x17,
            0xF0,0x71,0x94,0xA9,0x67,0xB4,0x75,0xDB,0x64,0xF0,0x6E,0x3D,0x4E,0x29,0x45,0x42,
            0xC3,0xDA,0x1F,0x9E,0x31,0x4D,0x1B,0xA7,0x9D,0x07,0xD9,0x10,0x75,0x27,0x92,0x16,
            0x35,0xF5,0x51,0x3E,0x14,0x00,0xB4,0xBD,0x21,0xAF,0x90,0xC5,0xE5,0xEE,0xD0,0xB3,
            0x7F,0x61,0xA5,0x1B,0x91,0xD5,0x66,0x08,0xB5,0x16,0x25,0xC2,0x16,0x53,0xDC,0xB5,
            0xF1,0xDD,0xCF,0x28,0xDD,0x57,0x90,0x66,0x33,0x7B,0x75,0xF4,0x8A,0x19,0xAC,0x1F,
            0x44,0xC2,0xF6,0x21,0x07,0xE9,0xCC,0xDD,0xCF,0x4A,0x34,0xA1,0x24,0x82,0xF8,0xA1,
            0x1D,0x06,0x90,0x4B,0x97,0xB8,0x10,0xF2,0x6A,0x55,0x30,0xD9,0x4F,0x94,0xE7,0x7C,
            0xBB,0x73,0xA3,0x5F,0xC6,0xF1,0xDB,0x84,0x3D,0x29,0x72,0xD1,0xAD,0x2D,0x77,0x3F,
            0x36,0x24,0x0F,0xC4,0x12,0xD7,0x3C,0x65,0x6C,0xE1,0x5A,0x32,0xAA,0x0B,0xA3,0xA2,
            0x72,0x33,0x00,0x3C,0x7E,0x28,0x36,0x10,0x90,0x38,0xFB,0xD7,0x26,0x07,0x6D,0xB7,
            0xE3,0x2F,0x7F,0xF0,0x49,0x83,0x12,0xB9,0xE2,0x48,0xB0,0x27,0xFE,0xA0,0xB3,0xA1,
            0x77,0x05,0x77,0x9C,0x3E,0x16,0xFC,0xA6,0x60,0x7F,0xCC,0x18,0xA9,0x0A,0x85,0x2A,
            0x1E,0xD6,0x3A,0x89,0x24,0xFD,0x95,0x4B,0x09,0x55,0xDE,0x6D,0x7F,0x35,0xFB,0x7A,
            0x08,0xF2,0xCA,0xED,0xA8,0xC2,0x00,0xE7,0x28,0x6C,0x9D,0x0F,0x06,0xDE,0x21,0xD7,
            0x10,0xA2,0xD2,0x8C,0x89,0x6C,0x69,0xFA,0x5D,0xA7,0x0E,0xC4,0x68,0xA1,0xAD,0x35,
            0x1C,0x38,0xFC,0xBD,0x0C,0x90,0x47,0xA5,0x40,0x0E,0x0B,0xF6,0xE5,0x05,0x54,0x4C,
            0x7D,0xCB,0xC5,0xF5,0xA5,0x8D,0x8C,0x7D,0x24,0xB3,0x3E,0x4B,0x8D,0x18,0x24,0x40,
            0x45,0xAA,0x8D,0x52,0x27,0x85,0x58,0x1B,0x76,0xD0,0xF3,0x78,0x51,0xCB,0xAC,0xD7,
            0xF1,0x16,0x5A,0x02,0x72,0xA4,0xF4,0xE1,0x44,0x48,0x3F,0x91,0xC0,0xEF,0xCB,0xB3,
            0x9C,0xE1,0x5E,0x9F,0x11,0x51,0x75,0x64,0x76,0x1E,0xF0,0x62,0xBE,0x02,0xFD,0x5F,
            0x19,0xE9,0xB2,0xA6,0x09,0xDA,0x3C,0xD0,0x46,0xE3,0x1D,0x24,0x44,0x13,0x8E,0xAA,
            0x7A,0x38,0xFC,0x40,0x9D,0xF8,0xF3,0x16,0x1D,0x98,0x67,0xD3,0x5C,0xDF,0xFF,0x93,
            0xB8,0x5B,0xC1,0x8E,0x22,0x49,0x9B,0x43,0x37,0xD3,0xBB,0x16,0xE6,0xDD,0xDF,0xE1,
            0x15,0xA7,0xF3,0x23,0x01,0xD0,0x1F,0xC8,0xFB,0xBD,0xFB,0x67,0xF2,0x9A,0x70,0xF4,
            0xFD,0xB3,0x7A,0xC1,0xCA,0xA3,0x01,0xDB,0x7D,0xB5,0xC2,0x68,0x67,0x1C,0x3D,0xBF,
            0xCC,0xA6,0x8E,0x3A,0x40,0x64,0x5A,0x54,0x44,0xE0,0x15,0xD6,0xC0,0x79,0x5B,0x6D,
            0x10,0x4C,0xEC,0x5A,0x88,0xCD,0x84,0xF6,0x33,0xD3,0xDB,0x69,0x2B,0xF4,0xC2,0x85,
            0x20,0xC1,0x02,0xD1,0x74,0x96,0xB0,0xD3,0x30,0x6B,0xE2,0x9C,0xB5,0xEB,0x79,0x63,
            0x26,0x50,0xE8,0xAA,0x39,0x3C,0x36,0x50,0x51,0xD8,0x77,0xD6,0xD7,0x69,0xC0,0x7C,
            0x33,0x9F,0x8F,0xEC,0x86,0x07,0xC2,0x74,0xA1,0x6B,0x24,0x3C,0x9D,0xAD,0xED,0x0D,
            0x9F,0x53,0xB7,0xCA,0x13,0x1E,0xAC,0x10,0xAE,0x1C,0xE0,0x42,0x15,0x4D,0xA9,0x2D,
            0x25,0xEF,0x7C,0x02,0x66,0x77,0xC1,0x8D,0x3B,0xD0,0xA8,0x31,0x3D,0x13,0x23,0x41,
            0x18,0x1D,0x75,0xA2,0xBB,0x74,0x45,0x1F,0x24,0xFD,0xBD,0xC5,0x8C,0xB6,0x62,0xF4,
            0xF4,0x65,0x0D,0xF8,0x3A,0x10,0xFF,0xFC,0x1D,0xF9,0xB5,0xB1,0x89,0xE8,0xCE,0xAB,
            0xCC,0x5C,0x52,0x28,0xFA,0xD6,0x9D,0x51,0x79,0x7A,0x65,0xAE,0x85,0x0A,0x1C,0x21,
            0xC2,0x21,0xF4,0xAB,0x41,0xCA,0xAD,0x19,0x9A,0x58,0xA7,0xFC,0xCC,0xD4,0xF7,0x2A,
            0x04,0xF0,0xFD,0x1E,0x4D,0x09,0x46,0x40,0xCC,0x06,0x13,0xAD,0x46,0x82,0x73,0xB9,
            0x1D,0x3F,0xFD,0xF3,0xD8,0xB3,0x36,0xE5,0x32,0xC1,0x81,0x18,0x93,0x0B,0x67,0x4C,
            0x95,0x88,0xD2,0xA8,0x7F,0x32,0xEE,0x10,0x19,0x5D,0xBE,0xB6,0x66,0xE7,0x30,0x90,
            0xD3,0xC1,0xE0,0x7A,0xCF,0x50,0x47,0xE0,0x7C,0x8F,0x66,0x17,0x39,0x41,0xB7,0x28,
            0x8C,0x34,0xB9,0xF6,0xF9,0xBA,0x14,0x76,0x96,0x8B,0x6C,0x56,0xC5,0x57,0x23,0xA0,
            0x63,0x44,0xB0,0x7D,0xFD,0x58,0xA9,0x2A,0x14,0xCA,0x17
        };

        signedPackageV2 = {
            0xF0,0x18,0x87,0x8C,0xCB,0x7D,0x49,0x43,0x98,0x00,0xA0,0x2F,0x05,0x9A,0xCA,0x02,
            0x01,0x8B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x0C,0xE5,0x07,0x00,
            0x08,0x00,0x01,0x0E,0x56,0x65,0x72,0x73,0x69,0x6F,0x6E,0x53,0x74,0x72,0x69,0x6E,
            0x67,0x31,0x01,0x2E,0x00,0x01,0x01,0x00,0x00,0x00,0x01,0x0E,0x00,0x00,0x01,0x56,
            0x65,0x72,0x73,0x69,0x6F,0x6E,0x53,0x74,0x72,0x69,0x6E,0x67,0x32,0x02,0x00,0x10,
            0x00,0x16,0x20,0x23,0xC9,0x3E,0xC5,0x41,0x15,0x95,0xF4,0x48,0x70,0x1D,0x49,0xD6,
            0x75,0x01,0x00,0x0A,0x00,0x64,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x8B,
            0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x01,0x0E,0x56,0x65,0x72,0x73,0x69,0x6F,0x6E,
            0x53,0x74,0x72,0x69,0x6E,0x67,0x33,0xF0,0xAB,0x72,0x6D,0x48,0xD2,0x1E,0x80,0x2E,
            0x77,0x71,0x2C,0x8E,0xE3,0x1F,0x6F,0x30,0x76,0x65,0x08,0xB8,0x1B,0x4B,0x03,0x7E,
            0x96,0xD9,0x2A,0x36,0x3A,0xA2,0xEE,0x8A,0x30,0x21,0x33,0xFC,0x27,0xE7,0x3E,0x56,
            0x79,0x0E,0xBD,0xED,0x44,0x96,0x2F,0x84,0xB5,0xED,0x19,0x3A,0x5E,0x62,0x2A,0x6E,
            0x41,0x7E,0xDC,0x2E,0xBB,0x87,0x41,0x7F,0xCE,0xF0,0xD7,0xE4,0x0F,0x95,0x33,0x3B,
            0xF9,0x04,0xF8,0x1A,0x92,0x54,0xFD,0x33,0xBA,0xCD,0xA6,0x08,0x0D,0x32,0x2C,0xEB,
            0x75,0xDC,0xEA,0xBA,0x30,0x94,0x78,0x8C,0x61,0x58,0xD0,0x59,0xF3,0x29,0x6D,0x67,
            0xD3,0x26,0x08,0x25,0x1E,0x69,0xBB,0x28,0xB0,0x61,0xFB,0x96,0xA3,0x8C,0xBF,0x01,
            0x94,0xEB,0x3A,0x63,0x6F,0xC8,0x0F,0x42,0x7F,0xEB,0x3D,0xA7,0x8B,0xE5,0xD2,0xFB,
            0xB8,0xD3,0x15,0xAA,0xDF,0x86,0xAB,0x6E,0x29,0xB3,0x12,0x96,0xB7,0x86,0xDA,0xF9,
            0xD7,0x70,0xAD,0xB6,0x1A,0x29,0xB1,0xA4,0x2B,0x6F,0x63,0xEE,0x05,0x9F,0x35,0x49,
            0xA1,0xAB,0xA2,0x6F,0x7C,0xFC,0x23,0x09,0x55,0xED,0xF7,0x35,0xD8,0x2F,0x8F,0xD2,
            0xBD,0x77,0xED,0x0C,0x7A,0xE9,0xD3,0xF7,0x90,0xA7,0x45,0x97,0xAA,0x3A,0x79,0xC4,
            0xF8,0xD2,0xFE,0xFB,0xB3,0x25,0x86,0x98,0x6B,0x98,0x10,0x15,0xB3,0xDD,0x43,0x0B,
            0x20,0x5F,0xE4,0x62,0xC8,0xA1,0x3E,0x9C,0xF3,0xD8,0xEA,0x15,0xA1,0x24,0x94,0x1C,
            0xF5,0xB4,0x86,0x04,0x30,0x2C,0x84,0xB6,0x29,0xF6,0x9D,0x76,0x6E,0xD4,0x0C,0x1C,
            0xBD,0xF9,0x95,0x7E,0xAF,0x62,0x80,0x14,0xE6,0x1C,0x43,0x51,0x5C,0xCA,0x50,0xE1,
            0x73,0x3D,0x75,0x66,0x52,0x9E,0xB6,0x15,0x7E,0xF7,0xE5,0xE2,0xAF,0x54,0x75,0x82,
            0x3D,0x55,0xC7,0x59,0xD7,0xBD,0x8C,0x4B,0x74,0xD1,0x3F,0xA8,0x1B,0x0A,0xF0,0x5A,
            0x32,0x2B,0xA7,0xA4,0xBE,0x38,0x18,0xAE,0x69,0xDC,0x54,0x7C,0x60,0xEF,0x4F,0x0F,
            0x7F,0x5A,0xA6,0xC8,0x3E,0x59,0xFD,0xF5,0x98,0x26,0x71,0xD0,0xEF,0x54,0x47,0x38,
            0x1F,0x18,0x9D,0x37,0x9D,0xF0,0xCD,0x00,0x73,0x30,0xD4,0xB7,0xDA,0x2D,0x36,0xA1,
            0xA9,0xAD,0x4F,0x9F,0x17,0xA5,0xA1,0x62,0x18,0x21,0xDD,0x0E,0xB6,0x72,0xDE,0x17,
            0xF0,0x71,0x94,0xA9,0x67,0xB4,0x75,0xDB,0x64,0xF0,0x6E,0x3D,0x4E,0x29,0x45,0x42,
            0xC3,0xDA,0x1F,0x9E,0x31,0x4D,0x1B,0xA7,0x9D,0x07,0xD9,0x10,0x75,0x27,0x92,0x16,
            0x35,0xF5,0x51,0x3E,0x14,0x00,0xB4,0xBD,0x21,0xAF,0x90,0xC5,0xE5,0xEE,0xD0,0xB3,
            0x7F,0x61,0xA5,0x1B,0x91,0xD5,0x66,0x08,0xB5,0x16,0x25,0xC2,0x16,0x53,0xDC,0xB5,
            0xF1,0xDD,0xCF,0x28,0xDD,0x57,0x90,0x66,0x33,0x7B,0x75,0xF4,0x8A,0x19,0xAC,0x1F,
            0x44,0xC2,0xF6,0x21,0x07,0xE9,0xCC,0xDD,0xCF,0x4A,0x34,0xA1,0x24,0x82,0xF8,0xA1,
            0x1D,0x06,0x90,0x4B,0x97,0xB8,0x10,0xF2,0x6A,0x55,0x30,0xD9,0x4F,0x94,0xE7,0x7C,
            0xBB,0x73,0xA3,0x5F,0xC6,0xF1,0xDB,0x84,0x3D,0x29,0x72,0xD1,0xAD,0x2D,0x77,0x3F,
            0x36,0x24,0x0F,0xC4,0x12,0xD7,0x3C,0x65,0x6C,0xE1,0x5A,0x32,0xAA,0x0B,0xA3,0xA2,
            0x72,0x33,0x00,0x3C,0x7E,0x28,0x36,0x10,0x90,0x38,0xFB,0xD7,0x26,0x07,0x6D,0xB7,
            0xE3,0x2F,0x7F,0xF0,0x49,0x83,0x12,0xB9,0xE2,0x48,0xB0,0x27,0xFE,0xA0,0xB3,0xA1,
            0x77,0x05,0x77,0x9C,0x3E,0x16,0xFC,0xA6,0x60,0x7F,0xCC,0x18,0xA9,0x0A,0x85,0x2A,
            0x1E,0xD6,0x3A,0x89,0x24,0xFD,0x95,0x4B,0x09,0x55,0xDE,0x6D,0x7F,0x35,0xFB,0x7A,
            0x08,0xF2,0xCA,0xED,0xA8,0xC2,0x00,0xE7,0x28,0x6C,0x9D,0x0F,0x06,0xDE,0x21,0xD7,
            0x10,0xA2,0xD2,0x8C,0x89,0x6C,0x69,0xFA,0x5D,0xA7,0x0E,0xC4,0x68,0xA1,0xAD,0x35,
            0x1C,0x38,0xFC,0xBD,0x0C,0x90,0x47,0xA5,0x40,0x0E,0x0B,0xF6,0xE5,0x05,0x54,0x4C,
            0x7D,0xCB,0xC5,0xF5,0xA5,0x8D,0x8C,0x7D,0x24,0xB3,0x3E,0x4B,0x8D,0x18,0x24,0x40,
            0x45,0xAA,0x8D,0x52,0x27,0x85,0x58,0x1B,0x76,0xD0,0xF3,0x78,0x51,0xCB,0xAC,0xD7,
            0xF1,0x16,0x5A,0x02,0x72,0xA4,0xF4,0xE1,0x44,0x48,0x3F,0x91,0xC0,0xEF,0xCB,0xB3,
            0x9C,0xE1,0x5E,0x9F,0x11,0x51,0x75,0x64,0x76,0x1E,0xF0,0x62,0xBE,0x02,0xFD,0x5F,
            0x19,0xE9,0xB2,0xA6,0x09,0xDA,0x3C,0xD0,0x46,0xE3,0x1D,0x24,0x44,0x13,0x8E,0xAA,
            0x7A,0x38,0xFC,0x40,0x9D,0xF8,0xF3,0x16,0x1D,0x98,0x67,0xD3,0x5C,0xDF,0xFF,0x93,
            0xB8,0x5B,0xC1,0x8E,0x22,0x49,0x9B,0x43,0x37,0xD3,0xBB,0x16,0xE6,0xDD,0xDF,0xE1,
            0x15,0xA7,0xF3,0x23,0x01,0xD0,0x1F,0xC8,0xFB,0xBD,0xFB,0x67,0xF2,0x9A,0x70,0xF4,
            0xFD,0xB3,0x7A,0xC1,0xCA,0xA3,0x01,0xDB,0x7D,0xB5,0xC2,0x68,0x67,0x1C,0x3D,0xBF,
            0xCC,0xA6,0x8E,0x3A,0x40,0x64,0x5A,0x54,0x44,0xE0,0x15,0xD6,0xC0,0x79,0x5B,0x6D,
            0x10,0x4C,0xEC,0x5A,0x88,0xCD,0x84,0xF6,0x33,0xD3,0xDB,0x69,0x2B,0xF4,0xC2,0x85,
            0x20,0xC1,0x02,0xD1,0x74,0x96,0xB0,0xD3,0x30,0x6B,0xE2,0x9C,0xB5,0xEB,0x79,0x63,
            0x26,0x50,0xE8,0xAA,0x39,0x3C,0x36,0x50,0x51,0xD8,0x77,0xD6,0xD7,0x69,0xC0,0x7C,
            0x33,0x9F,0x8F,0xEC,0x86,0x07,0xC2,0x74,0xA1,0x6B,0x24,0x3C,0x9D,0xAD,0xED,0x0D,
            0x9F,0x53,0xB7,0xCA,0x13,0x1E,0xAC,0x10,0xAE,0x1C,0xE0,0x42,0x15,0x4D,0xA9,0x2D,
            0x25,0xEF,0x7C,0x02,0x66,0x77,0xC1,0x8D,0x3B,0xD0,0xA8,0x31,0x3D,0x13,0x23,0x41,
            0x18,0x1D,0x75,0xA2,0xBB,0x74,0x45,0x1F,0x24,0xFD,0xBD,0xC5,0x8C,0xB6,0x62,0xF4,
            0xF4,0x65,0x0D,0xF8,0x3A,0x10,0xFF,0xFC,0x1D,0xF9,0xB5,0xB1,0x89,0xE8,0xCE,0xAB,
            0xCC,0x5C,0x52,0x28,0xFA,0xD6,0x9D,0x51,0x79,0x7A,0x65,0xAE,0x85,0x0A,0x1C,0x21,
            0xC2,0x21,0xF4,0xAB,0x41,0xCA,0xAD,0x19,0x9A,0x58,0xA7,0xFC,0xCC,0xD4,0xF7,0x2A,
            0x04,0xF0,0xFD,0x1E,0x4D,0x09,0x46,0x40,0xCC,0x06,0x13,0xAD,0x46,0x82,0x73,0xB9,
            0x1D,0x3F,0xFD,0xF3,0xD8,0xB3,0x36,0xE5,0x32,0xC1,0x81,0x18,0x93,0x0B,0x67,0x4C,
            0x95,0x88,0xD2,0xA8,0x7F,0x32,0xEE,0x10,0x19,0x5D,0xBE,0xB6,0x66,0xE7,0x30,0x90,
            0xD3,0xC1,0xE0,0x7A,0xCF,0x50,0x47,0xE0,0x7C,0x8F,0x66,0x17,0x39,0x41,0xB7,0x28,
            0x8C,0x34,0xB9,0xF6,0xF9,0xBA,0x14,0x76,0x96,0x8B,0x6C,0x56,0xC5,0x57,0x23,0xA0,
            0x63,0x44,0xB0,0x7D,0xFD,0x58,0xA9,0x2A,0x14,0xCA,0x17,
            //signature 
            //FW package signature v2
            //Magic
            0x5F,0x32,0xCB,0x08,
            //version (Major Version UINT8, Minor Version UINT8)
            0x02,0x00,
            //Security Version
            0x00,
            //Offset to Signature - The offset to the Signature Size field from the start of 
            //this signature structure (i.e. the beginning of the Magic field). 
            //For example, the current value should be 14 bytes now. 
            //The BMC code should use this offset to locate the signature size and signature value. 
            0x00,0x14,
            //Payload Size - Size of the FW Update Package being signed, which doesn’t include 
            //the fields in this signature structure.
            0x00,0x00,0x04,0x8B,
            //Signature Type
            0x00, //: ECDSA secp384r1 signature. 0x01 ~ 0xFF: Reserved for future. 
            //Signature Size
            0x00,0x66,
            //Signature
            0x30,0x64,0x02,0x30,0x70,0x8d,0x58,0x43,0x41,0x48,0x77,0x43,0x6e,0x06,0x08,0x85,
            0xba,0xd3,0x3d,0x9f,0x41,0x7d,0xce,0xfb,0x0b,0x9a,0x51,0xde,0x9d,0x63,0x8d,0xe0,
            0xb8,0x16,0x66,0x28,0x37,0x63,0x03,0x42,0x9b,0xcb,0x9d,0xc1,0x09,0x15,0x39,0x50,
            0xba,0x36,0x6c,0xa8,0x02,0x30,0x61,0xdb,0xcd,0x06,0xee,0x3d,0x69,0xcd,0x77,0x3d,
            0x0a,0x7c,0x81,0x42,0xc8,0x3e,0x94,0xe5,0x67,0xa4,0xe5,0x04,0x43,0x4f,0x53,0xe7,
            0xe9,0x3e,0xfe,0x0e,0x68,0x36,0x83,0xbb,0x9a,0x5b,0x58,0x9b,0xe0,0x64,0x02,0x63,
            0x71,0x64,0x57,0xf2,0x8f,0x99,

            //Reserved: Padding to 1 KB
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };

        signedPackageV2WithCorruptedBytes = {
            0xF0,0x18,0x87,0x8C,0xCB,0x7D,0x49,0x43,0x98,0x00,0xA0,0x2F,0x05,0x9A,0xCA,0x02,
            0x01,0x8B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x0C,0xE5,0x07,0x00,
            0x08,0x00,0x01,0x0E,0x56,0x65,0x72,0x73,0x69,0x6F,0x6E,0x53,0x74,0x72,0x69,0x6E,
            0x67,0x31,0x01,0x2E,0x00,0x01,0x01,0x00,0x00,0x00,0x01,0x0E,0x00,0x00,0x01,0x56,
            0x65,0x72,0x73,0x69,0x6F,0x6E,0x53,0x74,0x72,0x69,0x6E,0x67,0x32,0x02,0x00,0x10,
            0x00,0x16,0x20,0x23,0xC9,0x3E,0xC5,0x41,0x15,0x95,0xF4,0x48,0x70,0x1D,0x49,0xD6,
            0x75,0x01,0x00,0x0A,0x00,0x64,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x8B,
            0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x01,0x0E,0x56,0x65,0x72,0x73,0x69,0x6F,0x6E,
            0x53,0x74,0x72,0x69,0x6E,0x67,0x33,0xF0,0xAB,0x72,0x6D,0x48,0xD2,0x1E,0x80,0x2E,
            0x77,0x71,0x2C,0x8E,0xE3,0x1F,0x6F,0x30,0x76,0x65,0x08,0xB8,0x1B,0x4A,0x01,0x7F,//...,0x4B,0x03,0x7E, -> ...,0x4A,0x01,0x7F,
            0x96,0xD9,0x2A,0x36,0x3A,0xA2,0xEE,0x8A,0x30,0x21,0x33,0xFC,0x27,0xE7,0x3E,0x56,
            0x79,0x0E,0xBD,0xED,0x44,0x96,0x2F,0x84,0xB5,0xED,0x19,0x3A,0x5E,0x62,0x2A,0x6E,
            0x41,0x7E,0xDC,0x2E,0xBB,0x87,0x41,0x7F,0xCE,0xF0,0xD7,0xE4,0x0F,0x95,0x33,0x3B,
            0xF9,0x04,0xF8,0x1A,0x92,0x54,0xFD,0x33,0xBA,0xCD,0xA6,0x08,0x0D,0x32,0x2C,0xEB,
            0x75,0xDC,0xEA,0xBA,0x30,0x94,0x78,0x8C,0x61,0x58,0xD0,0x59,0xF3,0x29,0x6D,0x67,
            0xD3,0x26,0x08,0x25,0x1E,0x69,0xBB,0x28,0xB0,0x61,0xFB,0x96,0xA3,0x8C,0xBF,0x01,
            0x94,0xEB,0x3A,0x63,0x6F,0xC8,0x0F,0x42,0x7F,0xEB,0x3D,0xA7,0x8B,0xE5,0xD2,0xFB,
            0xB8,0xD3,0x15,0xAA,0xDF,0x86,0xAB,0x6E,0x29,0xB3,0x12,0x96,0xB7,0x86,0xDA,0xF9,
            0xD7,0x70,0xAD,0xB6,0x1A,0x29,0xB1,0xA4,0x2B,0x6F,0x63,0xEE,0x05,0x9F,0x35,0x49,
            0xA1,0xAB,0xA2,0x6F,0x7C,0xFC,0x23,0x09,0x55,0xED,0xF7,0x35,0xD8,0x2F,0x8F,0xD2,
            0xBD,0x77,0xED,0x0C,0x7A,0xE9,0xD3,0xF7,0x90,0xA7,0x45,0x97,0xAA,0x3A,0x79,0xC4,
            0xF8,0xD2,0xFE,0xFB,0xB3,0x25,0x86,0x98,0x6B,0x98,0x10,0x15,0xB3,0xDD,0x43,0x0B,
            0x20,0x5F,0xE4,0x62,0xC8,0xA1,0x3E,0x9C,0xF3,0xD8,0xEA,0x15,0xA1,0x24,0x94,0x1C,
            0xF5,0xB4,0x86,0x04,0x30,0x2C,0x84,0xB6,0x29,0xF6,0x9D,0x76,0x6E,0xD4,0x0C,0x1C,
            0xBD,0xF9,0x95,0x7E,0xAF,0x62,0x80,0x14,0xE6,0x1C,0x43,0x51,0x5C,0xCA,0x50,0xE1,
            0x73,0x3D,0x75,0x66,0x52,0x9E,0xB6,0x15,0x7E,0xF7,0xE5,0xE2,0xAF,0x54,0x75,0x82,
            0x3D,0x55,0xC7,0x59,0xD7,0xBD,0x8C,0x4B,0x74,0xD1,0x3F,0xA8,0x1B,0x0A,0xF0,0x5A,
            0x32,0x2B,0xA7,0xA4,0xBE,0x38,0x18,0xAE,0x69,0xDC,0x54,0x7C,0x60,0xEF,0x4F,0x0F,
            0x7F,0x5A,0xA6,0xC8,0x3E,0x59,0xFD,0xF5,0x98,0x26,0x71,0xD0,0xEF,0x54,0x47,0x38,
            0x1F,0x18,0x9D,0x37,0x9D,0xF0,0xCD,0x00,0x73,0x30,0xD4,0xB7,0xDA,0x2D,0x36,0xA1,
            0xA9,0xAD,0x4F,0x9F,0x17,0xA5,0xA1,0x62,0x18,0x21,0xDD,0x0E,0xB6,0x72,0xDE,0x17,
            0xF0,0x71,0x94,0xA9,0x67,0xB4,0x75,0xDB,0x64,0xF0,0x6E,0x3D,0x4E,0x29,0x45,0x42,
            0xC3,0xDA,0x1F,0x9E,0x31,0x4D,0x1B,0xA7,0x9D,0x07,0xD9,0x10,0x75,0x27,0x92,0x16,
            0x35,0xF5,0x51,0x3E,0x14,0x00,0xB4,0xBD,0x21,0xAF,0x90,0xC5,0xE5,0xEE,0xD0,0xB3,
            0x7F,0x61,0xA5,0x1B,0x91,0xD5,0x66,0x08,0xB5,0x16,0x25,0xC2,0x16,0x53,0xDC,0xB5,
            0xF1,0xDD,0xCF,0x28,0xDD,0x57,0x90,0x66,0x33,0x7B,0x75,0xF4,0x8A,0x19,0xAC,0x1F,
            0x44,0xC2,0xF6,0x21,0x07,0xE9,0xCC,0xDD,0xCF,0x4A,0x34,0xA1,0x24,0x82,0xF8,0xA1,
            0x1D,0x06,0x90,0x4B,0x97,0xB8,0x10,0xF2,0x6A,0x55,0x30,0xD9,0x4F,0x94,0xE7,0x7C,
            0xBB,0x73,0xA3,0x5F,0xC6,0xF1,0xDB,0x84,0x3D,0x29,0x72,0xD1,0xAD,0x2D,0x77,0x3F,
            0x36,0x24,0x0F,0xC4,0x12,0xD7,0x3C,0x65,0x6C,0xE1,0x5A,0x32,0xAA,0x0B,0xA3,0xA2,
            0x72,0x33,0x00,0x3C,0x7E,0x28,0x36,0x10,0x90,0x38,0xFB,0xD7,0x26,0x07,0x6D,0xB7,
            0xE3,0x2F,0x7F,0xF0,0x49,0x83,0x12,0xB9,0xE2,0x48,0xB0,0x27,0xFE,0xA0,0xB3,0xA1,
            0x77,0x05,0x77,0x9C,0x3E,0x16,0xFC,0xA6,0x60,0x7F,0xCC,0x18,0xA9,0x0A,0x85,0x2A,
            0x1E,0xD6,0x3A,0x89,0x24,0xFD,0x95,0x4B,0x09,0x55,0xDE,0x6D,0x7F,0x35,0xFB,0x7A,
            0x08,0xF2,0xCA,0xED,0xA8,0xC2,0x00,0xE7,0x28,0x6C,0x9D,0x0F,0x06,0xDE,0x21,0xD7,
            0x10,0xA2,0xD2,0x8C,0x89,0x6C,0x69,0xFA,0x5D,0xA7,0x0E,0xC4,0x68,0xA1,0xAD,0x35,
            0x1C,0x38,0xFC,0xBD,0x0C,0x90,0x47,0xA5,0x40,0x0E,0x0B,0xF6,0xE5,0x05,0x54,0x4C,
            0x7D,0xCB,0xC5,0xF5,0xA5,0x8D,0x8C,0x7D,0x24,0xB3,0x3E,0x4B,0x8D,0x18,0x24,0x40,
            0x45,0xAA,0x8D,0x52,0x27,0x85,0x58,0x1B,0x76,0xD0,0xF3,0x78,0x51,0xCB,0xAC,0xD7,
            0xF1,0x16,0x5A,0x02,0x72,0xA4,0xF4,0xE1,0x44,0x48,0x3F,0x91,0xC0,0xEF,0xCB,0xB3,
            0x9C,0xE1,0x5E,0x9F,0x11,0x51,0x75,0x64,0x76,0x1E,0xF0,0x62,0xBE,0x02,0xFD,0x5F,
            0x19,0xE9,0xB2,0xA6,0x09,0xDA,0x3C,0xD0,0x46,0xE3,0x1D,0x24,0x44,0x13,0x8E,0xAA,
            0x7A,0x38,0xFC,0x40,0x9D,0xF8,0xF3,0x16,0x1D,0x98,0x67,0xD3,0x5C,0xDF,0xFF,0x93,
            0xB8,0x5B,0xC1,0x8E,0x22,0x49,0x9B,0x43,0x37,0xD3,0xBB,0x16,0xE6,0xDD,0xDF,0xE1,
            0x15,0xA7,0xF3,0x23,0x01,0xD0,0x1F,0xC8,0xFB,0xBD,0xFB,0x67,0xF2,0x9A,0x70,0xF4,
            0xFD,0xB3,0x7A,0xC1,0xCA,0xA3,0x01,0xDB,0x7D,0xB5,0xC2,0x68,0x67,0x1C,0x3D,0xBF,
            0xCC,0xA6,0x8E,0x3A,0x40,0x64,0x5A,0x54,0x44,0xE0,0x15,0xD6,0xC0,0x79,0x5B,0x6D,
            0x10,0x4C,0xEC,0x5A,0x88,0xCD,0x84,0xF6,0x33,0xD3,0xDB,0x69,0x2B,0xF4,0xC2,0x85,
            0x20,0xC1,0x02,0xD1,0x74,0x96,0xB0,0xD3,0x30,0x6B,0xE2,0x9C,0xB5,0xEB,0x79,0x63,
            0x26,0x50,0xE8,0xAA,0x39,0x3C,0x36,0x50,0x51,0xD8,0x77,0xD6,0xD7,0x69,0xC0,0x7C,
            0x33,0x9F,0x8F,0xEC,0x86,0x07,0xC2,0x74,0xA1,0x6B,0x24,0x3C,0x9D,0xAD,0xED,0x0D,
            0x9F,0x53,0xB7,0xCA,0x13,0x1E,0xAC,0x10,0xAE,0x1C,0xE0,0x42,0x15,0x4D,0xA9,0x2D,
            0x25,0xEF,0x7C,0x02,0x66,0x77,0xC1,0x8D,0x3B,0xD0,0xA8,0x31,0x3D,0x13,0x23,0x41,
            0x18,0x1D,0x75,0xA2,0xBB,0x74,0x45,0x1F,0x24,0xFD,0xBD,0xC5,0x8C,0xB6,0x62,0xF4,
            0xF4,0x65,0x0D,0xF8,0x3A,0x10,0xFF,0xFC,0x1D,0xF9,0xB5,0xB1,0x89,0xE8,0xCE,0xAB,
            0xCC,0x5C,0x52,0x28,0xFA,0xD6,0x9D,0x51,0x79,0x7A,0x65,0xAE,0x85,0x0A,0x1C,0x21,
            0xC2,0x21,0xF4,0xAB,0x41,0xCA,0xAD,0x19,0x9A,0x58,0xA7,0xFC,0xCC,0xD4,0xF7,0x2A,
            0x04,0xF0,0xFD,0x1E,0x4D,0x09,0x46,0x40,0xCC,0x06,0x13,0xAD,0x46,0x82,0x73,0xB9,
            0x1D,0x3F,0xFD,0xF3,0xD8,0xB3,0x36,0xE5,0x32,0xC1,0x81,0x18,0x93,0x0B,0x67,0x4C,
            0x95,0x88,0xD2,0xA8,0x7F,0x32,0xEE,0x10,0x19,0x5D,0xBE,0xB6,0x66,0xE7,0x30,0x90,
            0xD3,0xC1,0xE0,0x7A,0xCF,0x50,0x47,0xE0,0x7C,0x8F,0x66,0x17,0x39,0x41,0xB7,0x28,
            0x8C,0x34,0xB9,0xF6,0xF9,0xBA,0x14,0x76,0x96,0x8B,0x6C,0x56,0xC5,0x57,0x23,0xA0,
            0x63,0x44,0xB0,0x7D,0xFD,0x58,0xA9,0x2A,0x14,0xCA,0x17,
            //signature 
            //FW package signature v2
            //Magic
            0x5F,0x32,0xCB,0x08,
            //version (Major Version UINT8, Minor Version UINT8)
            0x02,0x00,
            //Security Version
            0x00,
            //Offset to Signature - The offset to the Signature Size field from the start of 
            //this signature structure (i.e. the beginning of the Magic field). 
            //For example, the current value should be 14 bytes now. 
            //The BMC code should use this offset to locate the signature size and signature value. 
            0x00,0x14,
            //Payload Size - Size of the FW Update Package being signed, which doesn’t include 
            //the fields in this signature structure.
            0x00,0x00,0x04,0x8B,
            //Signature Type
            0x00, //: ECDSA secp384r1 signature. 0x01 ~ 0xFF: Reserved for future. 
            //Signature Size
            0x00,0x66,
            //Signature
            0x30,0x64,0x02,0x30,0x70,0x8d,0x58,0x43,0x41,0x48,0x77,0x43,0x6e,0x06,0x08,0x85,
            0xba,0xd3,0x3d,0x9f,0x41,0x7d,0xce,0xfb,0x0b,0x9a,0x51,0xde,0x9d,0x63,0x8d,0xe0,
            0xb8,0x16,0x66,0x28,0x37,0x63,0x03,0x42,0x9b,0xcb,0x9d,0xc1,0x09,0x15,0x39,0x50,
            0xba,0x36,0x6c,0xa8,0x02,0x30,0x61,0xdb,0xcd,0x06,0xee,0x3d,0x69,0xcd,0x77,0x3d,
            0x0a,0x7c,0x81,0x42,0xc8,0x3e,0x94,0xe5,0x67,0xa4,0xe5,0x04,0x43,0x4f,0x53,0xe7,
            0xe9,0x3e,0xfe,0x0e,0x68,0x36,0x83,0xbb,0x9a,0x5b,0x58,0x9b,0xe0,0x64,0x02,0x63,
            0x71,0x64,0x57,0xf2,0x8f,0x99,

            //Reserved: Padding to 1 KB
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };

        signedPackageV2BrokenSignature = {
            0xF0,0x18,0x87,0x8C,0xCB,0x7D,0x49,0x43,0x98,0x00,0xA0,0x2F,0x05,0x9A,0xCA,0x02,
            0x01,0x8B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x0C,0xE5,0x07,0x00,
            0x08,0x00,0x01,0x0E,0x56,0x65,0x72,0x73,0x69,0x6F,0x6E,0x53,0x74,0x72,0x69,0x6E,
            0x67,0x31,0x01,0x2E,0x00,0x01,0x01,0x00,0x00,0x00,0x01,0x0E,0x00,0x00,0x01,0x56,
            0x65,0x72,0x73,0x69,0x6F,0x6E,0x53,0x74,0x72,0x69,0x6E,0x67,0x32,0x02,0x00,0x10,
            0x00,0x16,0x20,0x23,0xC9,0x3E,0xC5,0x41,0x15,0x95,0xF4,0x48,0x70,0x1D,0x49,0xD6,
            0x75,0x01,0x00,0x0A,0x00,0x64,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x8B,
            0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x01,0x0E,0x56,0x65,0x72,0x73,0x69,0x6F,0x6E,
            0x53,0x74,0x72,0x69,0x6E,0x67,0x33,0xF0,0xAB,0x72,0x6D,0x48,0xD2,0x1E,0x80,0x2E,
            0x77,0x71,0x2C,0x8E,0xE3,0x1F,0x6F,0x30,0x76,0x65,0x08,0xB8,0x1B,0x4B,0x03,0x7E,
            0x96,0xD9,0x2A,0x36,0x3A,0xA2,0xEE,0x8A,0x30,0x21,0x33,0xFC,0x27,0xE7,0x3E,0x56,
            0x79,0x0E,0xBD,0xED,0x44,0x96,0x2F,0x84,0xB5,0xED,0x19,0x3A,0x5E,0x62,0x2A,0x6E,
            0x41,0x7E,0xDC,0x2E,0xBB,0x87,0x41,0x7F,0xCE,0xF0,0xD7,0xE4,0x0F,0x95,0x33,0x3B,
            0xF9,0x04,0xF8,0x1A,0x92,0x54,0xFD,0x33,0xBA,0xCD,0xA6,0x08,0x0D,0x32,0x2C,0xEB,
            0x75,0xDC,0xEA,0xBA,0x30,0x94,0x78,0x8C,0x61,0x58,0xD0,0x59,0xF3,0x29,0x6D,0x67,
            0xD3,0x26,0x08,0x25,0x1E,0x69,0xBB,0x28,0xB0,0x61,0xFB,0x96,0xA3,0x8C,0xBF,0x01,
            0x94,0xEB,0x3A,0x63,0x6F,0xC8,0x0F,0x42,0x7F,0xEB,0x3D,0xA7,0x8B,0xE5,0xD2,0xFB,
            0xB8,0xD3,0x15,0xAA,0xDF,0x86,0xAB,0x6E,0x29,0xB3,0x12,0x96,0xB7,0x86,0xDA,0xF9,
            0xD7,0x70,0xAD,0xB6,0x1A,0x29,0xB1,0xA4,0x2B,0x6F,0x63,0xEE,0x05,0x9F,0x35,0x49,
            0xA1,0xAB,0xA2,0x6F,0x7C,0xFC,0x23,0x09,0x55,0xED,0xF7,0x35,0xD8,0x2F,0x8F,0xD2,
            0xBD,0x77,0xED,0x0C,0x7A,0xE9,0xD3,0xF7,0x90,0xA7,0x45,0x97,0xAA,0x3A,0x79,0xC4,
            0xF8,0xD2,0xFE,0xFB,0xB3,0x25,0x86,0x98,0x6B,0x98,0x10,0x15,0xB3,0xDD,0x43,0x0B,
            0x20,0x5F,0xE4,0x62,0xC8,0xA1,0x3E,0x9C,0xF3,0xD8,0xEA,0x15,0xA1,0x24,0x94,0x1C,
            0xF5,0xB4,0x86,0x04,0x30,0x2C,0x84,0xB6,0x29,0xF6,0x9D,0x76,0x6E,0xD4,0x0C,0x1C,
            0xBD,0xF9,0x95,0x7E,0xAF,0x62,0x80,0x14,0xE6,0x1C,0x43,0x51,0x5C,0xCA,0x50,0xE1,
            0x73,0x3D,0x75,0x66,0x52,0x9E,0xB6,0x15,0x7E,0xF7,0xE5,0xE2,0xAF,0x54,0x75,0x82,
            0x3D,0x55,0xC7,0x59,0xD7,0xBD,0x8C,0x4B,0x74,0xD1,0x3F,0xA8,0x1B,0x0A,0xF0,0x5A,
            0x32,0x2B,0xA7,0xA4,0xBE,0x38,0x18,0xAE,0x69,0xDC,0x54,0x7C,0x60,0xEF,0x4F,0x0F,
            0x7F,0x5A,0xA6,0xC8,0x3E,0x59,0xFD,0xF5,0x98,0x26,0x71,0xD0,0xEF,0x54,0x47,0x38,
            0x1F,0x18,0x9D,0x37,0x9D,0xF0,0xCD,0x00,0x73,0x30,0xD4,0xB7,0xDA,0x2D,0x36,0xA1,
            0xA9,0xAD,0x4F,0x9F,0x17,0xA5,0xA1,0x62,0x18,0x21,0xDD,0x0E,0xB6,0x72,0xDE,0x17,
            0xF0,0x71,0x94,0xA9,0x67,0xB4,0x75,0xDB,0x64,0xF0,0x6E,0x3D,0x4E,0x29,0x45,0x42,
            0xC3,0xDA,0x1F,0x9E,0x31,0x4D,0x1B,0xA7,0x9D,0x07,0xD9,0x10,0x75,0x27,0x92,0x16,
            0x35,0xF5,0x51,0x3E,0x14,0x00,0xB4,0xBD,0x21,0xAF,0x90,0xC5,0xE5,0xEE,0xD0,0xB3,
            0x7F,0x61,0xA5,0x1B,0x91,0xD5,0x66,0x08,0xB5,0x16,0x25,0xC2,0x16,0x53,0xDC,0xB5,
            0xF1,0xDD,0xCF,0x28,0xDD,0x57,0x90,0x66,0x33,0x7B,0x75,0xF4,0x8A,0x19,0xAC,0x1F,
            0x44,0xC2,0xF6,0x21,0x07,0xE9,0xCC,0xDD,0xCF,0x4A,0x34,0xA1,0x24,0x82,0xF8,0xA1,
            0x1D,0x06,0x90,0x4B,0x97,0xB8,0x10,0xF2,0x6A,0x55,0x30,0xD9,0x4F,0x94,0xE7,0x7C,
            0xBB,0x73,0xA3,0x5F,0xC6,0xF1,0xDB,0x84,0x3D,0x29,0x72,0xD1,0xAD,0x2D,0x77,0x3F,
            0x36,0x24,0x0F,0xC4,0x12,0xD7,0x3C,0x65,0x6C,0xE1,0x5A,0x32,0xAA,0x0B,0xA3,0xA2,
            0x72,0x33,0x00,0x3C,0x7E,0x28,0x36,0x10,0x90,0x38,0xFB,0xD7,0x26,0x07,0x6D,0xB7,
            0xE3,0x2F,0x7F,0xF0,0x49,0x83,0x12,0xB9,0xE2,0x48,0xB0,0x27,0xFE,0xA0,0xB3,0xA1,
            0x77,0x05,0x77,0x9C,0x3E,0x16,0xFC,0xA6,0x60,0x7F,0xCC,0x18,0xA9,0x0A,0x85,0x2A,
            0x1E,0xD6,0x3A,0x89,0x24,0xFD,0x95,0x4B,0x09,0x55,0xDE,0x6D,0x7F,0x35,0xFB,0x7A,
            0x08,0xF2,0xCA,0xED,0xA8,0xC2,0x00,0xE7,0x28,0x6C,0x9D,0x0F,0x06,0xDE,0x21,0xD7,
            0x10,0xA2,0xD2,0x8C,0x89,0x6C,0x69,0xFA,0x5D,0xA7,0x0E,0xC4,0x68,0xA1,0xAD,0x35,
            0x1C,0x38,0xFC,0xBD,0x0C,0x90,0x47,0xA5,0x40,0x0E,0x0B,0xF6,0xE5,0x05,0x54,0x4C,
            0x7D,0xCB,0xC5,0xF5,0xA5,0x8D,0x8C,0x7D,0x24,0xB3,0x3E,0x4B,0x8D,0x18,0x24,0x40,
            0x45,0xAA,0x8D,0x52,0x27,0x85,0x58,0x1B,0x76,0xD0,0xF3,0x78,0x51,0xCB,0xAC,0xD7,
            0xF1,0x16,0x5A,0x02,0x72,0xA4,0xF4,0xE1,0x44,0x48,0x3F,0x91,0xC0,0xEF,0xCB,0xB3,
            0x9C,0xE1,0x5E,0x9F,0x11,0x51,0x75,0x64,0x76,0x1E,0xF0,0x62,0xBE,0x02,0xFD,0x5F,
            0x19,0xE9,0xB2,0xA6,0x09,0xDA,0x3C,0xD0,0x46,0xE3,0x1D,0x24,0x44,0x13,0x8E,0xAA,
            0x7A,0x38,0xFC,0x40,0x9D,0xF8,0xF3,0x16,0x1D,0x98,0x67,0xD3,0x5C,0xDF,0xFF,0x93,
            0xB8,0x5B,0xC1,0x8E,0x22,0x49,0x9B,0x43,0x37,0xD3,0xBB,0x16,0xE6,0xDD,0xDF,0xE1,
            0x15,0xA7,0xF3,0x23,0x01,0xD0,0x1F,0xC8,0xFB,0xBD,0xFB,0x67,0xF2,0x9A,0x70,0xF4,
            0xFD,0xB3,0x7A,0xC1,0xCA,0xA3,0x01,0xDB,0x7D,0xB5,0xC2,0x68,0x67,0x1C,0x3D,0xBF,
            0xCC,0xA6,0x8E,0x3A,0x40,0x64,0x5A,0x54,0x44,0xE0,0x15,0xD6,0xC0,0x79,0x5B,0x6D,
            0x10,0x4C,0xEC,0x5A,0x88,0xCD,0x84,0xF6,0x33,0xD3,0xDB,0x69,0x2B,0xF4,0xC2,0x85,
            0x20,0xC1,0x02,0xD1,0x74,0x96,0xB0,0xD3,0x30,0x6B,0xE2,0x9C,0xB5,0xEB,0x79,0x63,
            0x26,0x50,0xE8,0xAA,0x39,0x3C,0x36,0x50,0x51,0xD8,0x77,0xD6,0xD7,0x69,0xC0,0x7C,
            0x33,0x9F,0x8F,0xEC,0x86,0x07,0xC2,0x74,0xA1,0x6B,0x24,0x3C,0x9D,0xAD,0xED,0x0D,
            0x9F,0x53,0xB7,0xCA,0x13,0x1E,0xAC,0x10,0xAE,0x1C,0xE0,0x42,0x15,0x4D,0xA9,0x2D,
            0x25,0xEF,0x7C,0x02,0x66,0x77,0xC1,0x8D,0x3B,0xD0,0xA8,0x31,0x3D,0x13,0x23,0x41,
            0x18,0x1D,0x75,0xA2,0xBB,0x74,0x45,0x1F,0x24,0xFD,0xBD,0xC5,0x8C,0xB6,0x62,0xF4,
            0xF4,0x65,0x0D,0xF8,0x3A,0x10,0xFF,0xFC,0x1D,0xF9,0xB5,0xB1,0x89,0xE8,0xCE,0xAB,
            0xCC,0x5C,0x52,0x28,0xFA,0xD6,0x9D,0x51,0x79,0x7A,0x65,0xAE,0x85,0x0A,0x1C,0x21,
            0xC2,0x21,0xF4,0xAB,0x41,0xCA,0xAD,0x19,0x9A,0x58,0xA7,0xFC,0xCC,0xD4,0xF7,0x2A,
            0x04,0xF0,0xFD,0x1E,0x4D,0x09,0x46,0x40,0xCC,0x06,0x13,0xAD,0x46,0x82,0x73,0xB9,
            0x1D,0x3F,0xFD,0xF3,0xD8,0xB3,0x36,0xE5,0x32,0xC1,0x81,0x18,0x93,0x0B,0x67,0x4C,
            0x95,0x88,0xD2,0xA8,0x7F,0x32,0xEE,0x10,0x19,0x5D,0xBE,0xB6,0x66,0xE7,0x30,0x90,
            0xD3,0xC1,0xE0,0x7A,0xCF,0x50,0x47,0xE0,0x7C,0x8F,0x66,0x17,0x39,0x41,0xB7,0x28,
            0x8C,0x34,0xB9,0xF6,0xF9,0xBA,0x14,0x76,0x96,0x8B,0x6C,0x56,0xC5,0x57,0x23,0xA0,
            0x63,0x44,0xB0,0x7D,0xFD,0x58,0xA9,0x2A,0x14,0xCA,0x17,
            //signature 
            //FW package signature v2
            //Magic
            0x5F,0x32,0xCB,0x08,
            //version (Major Version UINT8, Minor Version UINT8)
            0x02,0x00,
            //Security Version
            0x00,
            //Offset to Signature - The offset to the Signature Size field from the start of 
            //this signature structure (i.e. the beginning of the Magic field). 
            //For example, the current value should be 14 bytes now. 
            //The BMC code should use this offset to locate the signature size and signature value. 
            0x00,0x14,
            //Payload Size - Size of the FW Update Package being signed, which doesn’t include 
            //the fields in this signature structure.
            0x00,0x00,0x04,0x8B,
            //Signature Type
            0x00, //: ECDSA secp384r1 signature. 0x01 ~ 0xFF: Reserved for future. 
            //Signature Size
            0x00,0x66,
            //Signature
            0x30,0x64,0x02,0x30,0x70,0x8d,0x58,0x43,0x41,0x48,0x77,0x43,0x6e,0x06,0x08,0x86, // 0x85 -> 0x86
            0xba,0xd3,0x3d,0x9f,0x41,0x7d,0xce,0xfb,0x0b,0x9a,0x51,0xde,0x9d,0x63,0x8d,0xe0,
            0xb8,0x16,0x66,0x28,0x37,0x63,0x03,0x42,0x9b,0xcb,0x9d,0xc1,0x09,0x15,0x39,0x50,
            0xba,0x36,0x6c,0xa8,0x02,0x30,0x61,0xdb,0xcd,0x06,0xee,0x3d,0x69,0xcd,0x77,0x3d,
            0x0a,0x7c,0x81,0x42,0xc8,0x3e,0x94,0xe5,0x67,0xa4,0xe5,0x04,0x43,0x4f,0x53,0xe7,
            0xe9,0x3e,0xfe,0x0e,0x68,0x36,0x83,0xbb,0x9a,0x5b,0x58,0x9b,0xe0,0x64,0x02,0x63,
            0x71,0x64,0x57,0xf2,0x8f,0x99,

            //Reserved: Padding to 1 KB
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };

        signHeaderV2WitoutPadding = {
            //signature 
            //FW package signature v2
            //Magic
            0x5F,0x32,0xCB,0x08,
            //version (Major Version UINT8, Minor Version UINT8)
            0x02,0x00,
            //Security Version
            0x00,
            //Offset to Signature - The offset to the Signature Size field from the start of 
            //this signature structure (i.e. the beginning of the Magic field). 
            //For example, the current value should be 14 bytes now. 
            //The BMC code should use this offset to locate the signature size and signature value. 
            0x00,0x14,
            //Payload Size - Size of the FW Update Package being signed, which doesn’t include 
            //the fields in this signature structure.
            0x00,0x00,0x04,0x8B,
            //Signature Type
            0x00, //: ECDSA secp384r1 signature. 0x01 ~ 0xFF: Reserved for future. 
            //Signature Size
            0x00,0x66,
            //Signature
            0x30,0x64,0x02,0x30,0x70,0x8d,0x58,0x43,0x41,0x48,0x77,0x43,0x6e,0x06,0x08,0x85,
            0xba,0xd3,0x3d,0x9f,0x41,0x7d,0xce,0xfb,0x0b,0x9a,0x51,0xde,0x9d,0x63,0x8d,0xe0,
            0xb8,0x16,0x66,0x28,0x37,0x63,0x03,0x42,0x9b,0xcb,0x9d,0xc1,0x09,0x15,0x39,0x50,
            0xba,0x36,0x6c,0xa8,0x02,0x30,0x61,0xdb,0xcd,0x06,0xee,0x3d,0x69,0xcd,0x77,0x3d,
            0x0a,0x7c,0x81,0x42,0xc8,0x3e,0x94,0xe5,0x67,0xa4,0xe5,0x04,0x43,0x4f,0x53,0xe7,
            0xe9,0x3e,0xfe,0x0e,0x68,0x36,0x83,0xbb,0x9a,0x5b,0x58,0x9b,0xe0,0x64,0x02,0x63,
            0x71,0x64,0x57,0xf2,0x8f,0x99
        };

        signHeaderV2WitoutPaddingCorruptedMagic = {
            //signature 
            //FW package signature v2
            //Magic
            0x5F,0x32,0xCB,0x09,
            //version (Major Version UINT8, Minor Version UINT8)
            0x02,0x00,
            //Security Version
            0x00,
            //Offset to Signature - The offset to the Signature Size field from the start of 
            //this signature structure (i.e. the beginning of the Magic field). 
            //For example, the current value should be 14 bytes now. 
            //The BMC code should use this offset to locate the signature size and signature value. 
            0x00,0x14,
            //Payload Size - Size of the FW Update Package being signed, which doesn’t include 
            //the fields in this signature structure.
            0x00,0x00,0x04,0x8B,
            //Signature Type
            0x00, //: ECDSA secp384r1 signature. 0x01 ~ 0xFF: Reserved for future. 
            //Signature Size
            0x00,0x66,
            //Signature
            0x30,0x64,0x02,0x30,0x70,0x8d,0x58,0x43,0x41,0x48,0x77,0x43,0x6e,0x06,0x08,0x85,
            0xba,0xd3,0x3d,0x9f,0x41,0x7d,0xce,0xfb,0x0b,0x9a,0x51,0xde,0x9d,0x63,0x8d,0xe0,
            0xb8,0x16,0x66,0x28,0x37,0x63,0x03,0x42,0x9b,0xcb,0x9d,0xc1,0x09,0x15,0x39,0x50,
            0xba,0x36,0x6c,0xa8,0x02,0x30,0x61,0xdb,0xcd,0x06,0xee,0x3d,0x69,0xcd,0x77,0x3d,
            0x0a,0x7c,0x81,0x42,0xc8,0x3e,0x94,0xe5,0x67,0xa4,0xe5,0x04,0x43,0x4f,0x53,0xe7,
            0xe9,0x3e,0xfe,0x0e,0x68,0x36,0x83,0xbb,0x9a,0x5b,0x58,0x9b,0xe0,0x64,0x02,0x63,
            0x71,0x64,0x57,0xf2,0x8f,0x99
        }; 

        signHeaderV2WitoutPaddingCorruptedMajorVersion = {
            //signature 
            //FW package signature v2
            //Magic
            0x5F,0x32,0xCB,0x08,
            //version (Major Version UINT8, Minor Version UINT8)
            0x03,0x00,
            //Security Version
            0x00,
            //Offset to Signature - The offset to the Signature Size field from the start of 
            //this signature structure (i.e. the beginning of the Magic field). 
            //For example, the current value should be 14 bytes now. 
            //The BMC code should use this offset to locate the signature size and signature value. 
            0x00,0x14,
            //Payload Size - Size of the FW Update Package being signed, which doesn’t include 
            //the fields in this signature structure.
            0x00,0x00,0x04,0x8B,
            //Signature Type
            0x00, //: ECDSA secp384r1 signature. 0x01 ~ 0xFF: Reserved for future. 
            //Signature Size
            0x00,0x66,
            //Signature
            0x30,0x64,0x02,0x30,0x70,0x8d,0x58,0x43,0x41,0x48,0x77,0x43,0x6e,0x06,0x08,0x85,
            0xba,0xd3,0x3d,0x9f,0x41,0x7d,0xce,0xfb,0x0b,0x9a,0x51,0xde,0x9d,0x63,0x8d,0xe0,
            0xb8,0x16,0x66,0x28,0x37,0x63,0x03,0x42,0x9b,0xcb,0x9d,0xc1,0x09,0x15,0x39,0x50,
            0xba,0x36,0x6c,0xa8,0x02,0x30,0x61,0xdb,0xcd,0x06,0xee,0x3d,0x69,0xcd,0x77,0x3d,
            0x0a,0x7c,0x81,0x42,0xc8,0x3e,0x94,0xe5,0x67,0xa4,0xe5,0x04,0x43,0x4f,0x53,0xe7,
            0xe9,0x3e,0xfe,0x0e,0x68,0x36,0x83,0xbb,0x9a,0x5b,0x58,0x9b,0xe0,0x64,0x02,0x63,
            0x71,0x64,0x57,0xf2,0x8f,0x99
        };

        signHeaderV2WitoutPaddingCorruptedSignatureType = {
            //signature 
            //FW package signature v2
            //Magic
            0x5F,0x32,0xCB,0x08,
            //version (Major Version UINT8, Minor Version UINT8)
            0x02,0x00,
            //Security Version
            0x00,
            //Offset to Signature - The offset to the Signature Size field from the start of 
            //this signature structure (i.e. the beginning of the Magic field). 
            //For example, the current value should be 14 bytes now. 
            //The BMC code should use this offset to locate the signature size and signature value. 
            0x00,0x14,
            //Payload Size - Size of the FW Update Package being signed, which doesn’t include 
            //the fields in this signature structure.
            0x00,0x00,0x04,0x8B,
            //Signature Type
            0x01, //: ECDSA secp384r1 signature. 0x01 ~ 0xFF: Reserved for future. 
            //Signature Size
            0x00,0x66,
            //Signature
            0x30,0x64,0x02,0x30,0x70,0x8d,0x58,0x43,0x41,0x48,0x77,0x43,0x6e,0x06,0x08,0x85,
            0xba,0xd3,0x3d,0x9f,0x41,0x7d,0xce,0xfb,0x0b,0x9a,0x51,0xde,0x9d,0x63,0x8d,0xe0,
            0xb8,0x16,0x66,0x28,0x37,0x63,0x03,0x42,0x9b,0xcb,0x9d,0xc1,0x09,0x15,0x39,0x50,
            0xba,0x36,0x6c,0xa8,0x02,0x30,0x61,0xdb,0xcd,0x06,0xee,0x3d,0x69,0xcd,0x77,0x3d,
            0x0a,0x7c,0x81,0x42,0xc8,0x3e,0x94,0xe5,0x67,0xa4,0xe5,0x04,0x43,0x4f,0x53,0xe7,
            0xe9,0x3e,0xfe,0x0e,0x68,0x36,0x83,0xbb,0x9a,0x5b,0x58,0x9b,0xe0,0x64,0x02,0x63,
            0x71,0x64,0x57,0xf2,0x8f,0x99
        };

        publicKey = PLDM_PACKAGE_VERIFICATION_KEY;
        publicKeyCorrupted = "2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2\
                              d2d0a4d485977454159484b6f5a497a6a3043415159464b34\
                              454541434944596741457770724a78393133306b4f46766f7\
                              64c546b36436e394551696d632b383066610a476934357475\
                              69386856385568786a4c755a54315263484a4e48575278536\
                              3566e6c6358435369516f6e6c5476666f4a3971444d767961\
                              4d415570354c694f4f0a4154774c57564a646654536143635\
                              450554e567147735276676841774342654e0a2d2d2d2d2d45\
                              4e44205055424c4943204b45592d2d2d2d2d0b"; // a -> b
    }

    uint8_t pldmFwupSignatureOffsetLength = 2;

    std::vector<uint8_t> unsignedPackage;
    std::vector<uint8_t> signedPackageV2;
    std::vector<uint8_t> signedPackageV2BrokenSignature;
    std::vector<uint8_t> signedPackageV2WithCorruptedBytes;
    std::vector<uint8_t> signHeaderV2WitoutPadding;
    std::vector<uint8_t> signHeaderV2WitoutPaddingCorruptedMagic;
    std::vector<uint8_t> signHeaderV2WitoutPaddingCorruptedMajorVersion;
    std::vector<uint8_t> signHeaderV2WitoutPaddingCorruptedSignatureType;

    std::string publicKey;
    std::string publicKeyCorrupted;

    uintmax_t calculatePackageSize(std::istream& package)
    {
        std::vector<uint8_t> packageHeader(sizeof(pldm_package_header_information));
        package.read(reinterpret_cast<char*>(packageHeader.data()),
                    sizeof(pldm_package_header_information));

        package.seekg( 0, std::ios_base::end );

        uintmax_t packageSize = package.tellg();

        auto pkgHeaderInfo =
            reinterpret_cast<const pldm_package_header_information*>(
                packageHeader.data());

        auto pkgHeaderInfoSize = sizeof(pldm_package_header_information) +
                                pkgHeaderInfo->package_version_string_length;

        packageHeader.clear();

        packageHeader.resize(pkgHeaderInfoSize);

        package.seekg(0);

        package.read(reinterpret_cast<char*>(packageHeader.data()),
                    pkgHeaderInfoSize);

        auto parser = parsePkgHeader(packageHeader);

        package.seekg(0);
        packageHeader.resize(parser->pkgHeaderSize);
        package.read(reinterpret_cast<char*>(packageHeader.data()),
                    parser->pkgHeaderSize);

        parser->parse(packageHeader, packageSize);

        return parser->calculatePackageSize();
    }
};

TEST_F(PackageSignatureTest, detectUnsignedPackage)
{
    std::string strPkg((char*)unsignedPackage.data(), unsignedPackage.size());
    std::istringstream package(strPkg);

    uintmax_t calcPkgSize = calculatePackageSize(package);

    std::vector<uint8_t> pkgSignHdrData = PackageSignature::getSignatureHeader(package, calcPkgSize);

    EXPECT_EQ(pkgSignHdrData.size(), 0);
}

TEST_F(PackageSignatureTest, signatureV2Verification)
{
    std::string strPkg((char*)signedPackageV2.data(), signedPackageV2.size());
    std::istringstream package(strPkg);

    uintmax_t calcPkgSize = calculatePackageSize(package);

    std::vector<uint8_t> pkgSignHdrData = PackageSignature::getSignatureHeader(package, calcPkgSize);

    std::unique_ptr<PackageSignature> packageSignatureParser 
        = PackageSignature::createPackageSignatureParser(pkgSignHdrData, publicKey);

    packageSignatureParser->parseHeader();

    uintmax_t sizeOfSignedData = packageSignatureParser->calculateSizeOfSignedData(calcPkgSize);

    bool verificationResult = packageSignatureParser->verify(package, sizeOfSignedData);

    EXPECT_EQ(pkgSignHdrData.size(), pldmFwupSignaturePackageSize);
    EXPECT_TRUE(verificationResult);
}

TEST_F(PackageSignatureTest, signatureV2CorruptedPublicKey)
{
    std::string strPkg((char*)signedPackageV2.data(), signedPackageV2.size());
    std::istringstream package(strPkg);

    uintmax_t calcPkgSize = calculatePackageSize(package);

    std::vector<uint8_t> pkgSignHdrData = PackageSignature::getSignatureHeader(package, calcPkgSize);

    std::unique_ptr<PackageSignature> packageSignatureParser 
        = PackageSignature::createPackageSignatureParser(pkgSignHdrData, publicKeyCorrupted);

    packageSignatureParser->parseHeader();

    uintmax_t sizeOfSignedData = packageSignatureParser->calculateSizeOfSignedData(calcPkgSize);

    bool verificationResult = packageSignatureParser->verify(package, sizeOfSignedData);

    EXPECT_EQ(pkgSignHdrData.size(), pldmFwupSignaturePackageSize);
    EXPECT_FALSE(verificationResult);
}

TEST_F(PackageSignatureTest, signatureV2VerificationBrokenSignature)
{
    std::string strPkg((char*)signedPackageV2BrokenSignature.data(), signedPackageV2BrokenSignature.size());
    std::istringstream package(strPkg);

    uintmax_t calcPkgSize = calculatePackageSize(package);

    std::vector<uint8_t> pkgSignHdrData = PackageSignature::getSignatureHeader(package, calcPkgSize);

    std::unique_ptr<PackageSignature> packageSignatureParser 
        = PackageSignature::createPackageSignatureParser(pkgSignHdrData, publicKey);

    packageSignatureParser->parseHeader();

    uintmax_t sizeOfSignedData = packageSignatureParser->calculateSizeOfSignedData(calcPkgSize);

    bool verificationResult = packageSignatureParser->verify(package, sizeOfSignedData);

    EXPECT_EQ(pkgSignHdrData.size(), pldmFwupSignaturePackageSize);
    EXPECT_FALSE(verificationResult);
}

TEST_F(PackageSignatureTest, signatureV2PackageWithCorruptedBytes)
{
    std::string strPkg((char*)signedPackageV2WithCorruptedBytes.data(), signedPackageV2WithCorruptedBytes.size());
    std::istringstream package(strPkg);

    uintmax_t calcPkgSize = calculatePackageSize(package);

    std::vector<uint8_t> pkgSignHdrData = PackageSignature::getSignatureHeader(package, calcPkgSize);

    std::unique_ptr<PackageSignature> packageSignatureParser 
        = PackageSignature::createPackageSignatureParser(pkgSignHdrData, publicKey);

    packageSignatureParser->parseHeader();

    uintmax_t sizeOfSignedData = packageSignatureParser->calculateSizeOfSignedData(calcPkgSize);

    bool verificationResult = packageSignatureParser->verify(package, sizeOfSignedData);

    EXPECT_EQ(pkgSignHdrData.size(), pldmFwupSignaturePackageSize);
    EXPECT_FALSE(verificationResult);
}

TEST_F(PackageSignatureTest, signatureV2ParseHeader)
{  
    std::unique_ptr<PackageSignature> packageSignatureParser 
        = std::make_unique<PackageSignatureV2>(signHeaderV2WitoutPadding, publicKey);

    EXPECT_NO_THROW({
        packageSignatureParser->parseHeader();
    });
}

TEST_F(PackageSignatureTest, signatureV2ParseHeaderCorruptedMagic)
{  
    std::unique_ptr<PackageSignature> packageSignatureParser 
        = std::make_unique<PackageSignatureV2>(signHeaderV2WitoutPaddingCorruptedMagic, publicKey);

    EXPECT_THROW(packageSignatureParser->parseHeader(), InternalFailure);
}

TEST_F(PackageSignatureTest, signatureV2ParseHeaderCorruptedMajorVersion)
{  
    std::unique_ptr<PackageSignature> packageSignatureParser 
        = std::make_unique<PackageSignatureV2>(signHeaderV2WitoutPaddingCorruptedMajorVersion, publicKey);

    EXPECT_THROW(packageSignatureParser->parseHeader(), InternalFailure);
}

TEST_F(PackageSignatureTest, signatureV2ParseHeaderCorruptedSignatureType)
{  
    std::unique_ptr<PackageSignature> packageSignatureParser 
        = std::make_unique<PackageSignatureV2>(signHeaderV2WitoutPaddingCorruptedSignatureType, publicKey);

    EXPECT_THROW(packageSignatureParser->parseHeader(), InternalFailure);
}

TEST_F(PackageSignatureTest, signatureV2IncorrectSizeOfPackage)
{
    std::vector<uint8_t> signedPackageV2IncorrectSize(signedPackageV2);
    uintmax_t pkgSizeWithoutsignatureHeader = 1163;

    // extend size of package
    signedPackageV2IncorrectSize.push_back(0x00);

    std::string strPkg((char*)signedPackageV2IncorrectSize.data(),
                       signedPackageV2IncorrectSize.size());
    std::istringstream package(strPkg);

    EXPECT_THROW(PackageSignature::getSignatureHeader(
                     package, pkgSizeWithoutsignatureHeader),
                 InternalFailure);
}

TEST_F(PackageSignatureTest, signatureV2IncorrectSignatureVersion)
{
    std::vector<uint8_t> signHeaderV2IncorrectVersion(
        signHeaderV2WitoutPadding);
    // change version number
    signHeaderV2IncorrectVersion[pldmFwupSignatureMagicLength] = 0x99;

    std::unique_ptr<PackageSignature> packageSignatureParser =
        std::make_unique<PackageSignatureV2>(signHeaderV2IncorrectVersion,
                                             publicKey);

    EXPECT_THROW(packageSignatureParser->parseHeader(), InternalFailure);
}

TEST_F(PackageSignatureTest, signatureV2DeprecatedSignatureVersion)
{
    std::vector<uint8_t> signHeaderV2IncorrectVersion(
        signHeaderV2WitoutPadding);
    // change version number
    signHeaderV2IncorrectVersion[pldmFwupSignatureMagicLength] = 0x01;

    std::unique_ptr<PackageSignature> packageSignatureParser =
        std::make_unique<PackageSignatureV2>(signHeaderV2IncorrectVersion,
                                             publicKey);

    EXPECT_THROW(packageSignatureParser->parseHeader(), InternalFailure);
}

TEST_F(PackageSignatureTest, signatureV2SignatureSizeTooSmall)
{
    std::vector<uint8_t> signHeaderV2IncorrectVersion(
        signHeaderV2WitoutPadding);
    // calculate index of signature size
    uintmax_t signatureSizePosition =
        pldmFwupSignatureMagicLength + sizeof(uint8_t) // majorVersion
        + sizeof(uint8_t)                              // minorVersion
        + sizeof(uint8_t)                              // securityVersion
        + pldmFwupSignatureOffsetLength + pldmFwupSignaturePayloadLength +
        sizeof(uint8_t); // signatureType

    // change size of signature
    signHeaderV2IncorrectVersion[signatureSizePosition + 1] = 0x50;

    std::unique_ptr<PackageSignature> packageSignatureParser =
        std::make_unique<PackageSignatureV2>(signHeaderV2IncorrectVersion,
                                             publicKey);

    EXPECT_THROW(packageSignatureParser->parseHeader(), InternalFailure);
}

TEST_F(PackageSignatureTest, signatureV2SignatureSizeTooBig)
{
    std::vector<uint8_t> signHeaderV2IncorrectVersion(
        signHeaderV2WitoutPadding);
    // calculate index of signature size
    uintmax_t signatureSizePosition =
        pldmFwupSignatureMagicLength + sizeof(uint8_t) // majorVersion
        + sizeof(uint8_t)                              // minorVersion
        + sizeof(uint8_t)                              // securityVersion
        + pldmFwupSignatureOffsetLength + pldmFwupSignaturePayloadLength +
        sizeof(uint8_t); // signatureType

    // change size of signature
    signHeaderV2IncorrectVersion[signatureSizePosition + 1] = 0x90;

    std::unique_ptr<PackageSignature> packageSignatureParser =
        std::make_unique<PackageSignatureV2>(signHeaderV2IncorrectVersion,
                                             publicKey);

    EXPECT_THROW(packageSignatureParser->parseHeader(), InternalFailure);
}

/** @class PackageSignatureV2TestUseChunks
 *
 *  The class is created only to test signature verification with disabled
 *  or enabled useChunks property to generate digest to verify signature.
 */
class PackageSignatureV2TestUseChunks : public PackageSignatureV2
{
  public:
    PackageSignatureV2TestUseChunks() = delete;
    PackageSignatureV2TestUseChunks(const PackageSignatureV2TestUseChunks&) =
        delete;
    PackageSignatureV2TestUseChunks&
        operator=(const PackageSignatureV2TestUseChunks&) = delete;
    PackageSignatureV2TestUseChunks(PackageSignatureV2TestUseChunks&&) =
        default;
    PackageSignatureV2TestUseChunks&
        operator=(PackageSignatureV2TestUseChunks&&) = default;
    virtual ~PackageSignatureV2TestUseChunks() = default;

    /** @brief Constructor
     *
     *  @param[in] pkgSignData - Package Signature Header with signature
     *  @param[in] publicKey - Public Key
     *  @param[in] useChunks - Steering useChunks parameter to generate digest
     * to verify signature
     */
    explicit PackageSignatureV2TestUseChunks(std::vector<uint8_t>& pkgSignData,
                                             std::string publicKey,
                                             bool useChunks) :
        PackageSignatureV2(pkgSignData, publicKey)
    {
        signatureSha->useChunks = useChunks;
    }
};

TEST_F(PackageSignatureTest, signatureV2WithUseChunksDisabled)
{

    std::string strPkg((char*)signedPackageV2.data(), signedPackageV2.size());
    std::istringstream package(strPkg);

    uintmax_t calcPkgSize = calculatePackageSize(package);

    std::vector<uint8_t> pkgSignHdrData =
        PackageSignature::getSignatureHeader(package, calcPkgSize);

    PackageSignatureV2TestUseChunks packageSignatureParser(pkgSignHdrData,
                                                           publicKey, false);

    packageSignatureParser.parseHeader();

    uintmax_t sizeOfSignedData =
        packageSignatureParser.calculateSizeOfSignedData(calcPkgSize);

    bool verificationResult =
        packageSignatureParser.verify(package, sizeOfSignedData);

    EXPECT_EQ(pkgSignHdrData.size(), pldmFwupSignaturePackageSize);
    EXPECT_TRUE(verificationResult);
}

TEST_F(PackageSignatureTest, signatureV2WithUseChunksEnabled)
{

    std::string strPkg((char*)signedPackageV2.data(), signedPackageV2.size());
    std::istringstream package(strPkg);

    uintmax_t calcPkgSize = calculatePackageSize(package);

    std::vector<uint8_t> pkgSignHdrData =
        PackageSignature::getSignatureHeader(package, calcPkgSize);

    PackageSignatureV2TestUseChunks packageSignatureParser(pkgSignHdrData,
                                                           publicKey, true);

    packageSignatureParser.parseHeader();

    uintmax_t sizeOfSignedData =
        packageSignatureParser.calculateSizeOfSignedData(calcPkgSize);

    bool verificationResult =
        packageSignatureParser.verify(package, sizeOfSignedData);

    EXPECT_EQ(pkgSignHdrData.size(), pldmFwupSignaturePackageSize);
    EXPECT_TRUE(verificationResult);
}